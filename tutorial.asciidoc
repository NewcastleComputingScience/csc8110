= Enterprise Middleware Coursework - Tutorial

This tutorial guides you through the necessary preparation required to begin your coursework.
It is very important that you have completed this and are comfortable with the example, before beginning the coursework.

== Create Accounts
To complete this coursework you will need accounts on GitHub and OpenShift.

=== GitHub
GitHub offers the Git version control system as a service.
You will use it to host your code and to make it available to the demonstrators.
GitHub is very popular in the open-source community and works best when you make your code available to others to view, clone and contribute towards.
However, given the confidential nature of your coursework, you will need to use a private repository only accessible by yourself and the demonstrators.

If you don't already have an account you will need to:

1. Go to: https://github.com/
2. Fill in your details and select "Sign up for GitHub."
3. Obtain a private repository. The steps to do this should have been provided to you already.

TIP: GitHub is a very popular service, and you are quite likely to use it in your profesional career; especially if you work with open source software in some capacity.

=== OpenShift
OpenShift is a Platform as a Service (PaaS) Cloud offered by Red Hat.
It can host many types of applications, but for this coursework you will be using it to host Java EE 6 applications on JBoss EAP.
OpenShift has a free tier of membership, which you will use for the coursework.

To create an account:

. Go to: https://www.openshift.com
. Select "Signup for Free" under the "Online" option.
. Fill in your details and select "Sign Up".
. You should now receive an email containing a link to confirm your registration.  Click this link and confirm that you agree to OpenShift's terms of use.
. Later on, when you are ready to deploy to Openshift - click link:https://github.com/NewcastleComputingScience/jboss-wfk-quickstarts/blob/v2.7.0-SNAPSHOT+NCL201415/README.md#build-and-deploy-the-quickstart---to-openshift[here]

== Environment Setup

Once you have confirmed (as mentioned above) your email address with OpenShift, you will be directed to a web page titled https://www.openshift.com/get-started["Get Started"].
On this page you will need to select the *Windows* option at the top of the page and follow the "Installing the Client Tools on Windows" instructions subsequently displayed.
Once you have completed these steps you should have successfully created an OpenShift account, installed Ruby and the Openshift RHC Client Tools on your computer.

* *Setup*. When running the `rhc setup` command you will be asked for your openshift *login* and *password*. Your login details are those used to register for OpenShift. When asked to provide a namespace for your projects, you should provide your student number (e.g 100826753).

IMPORTANT: If you encounter an "Access is denied" warning when running the RubyInstaller setup program, you should copy the installer into `C:/temp`, right click the executable and select "Run as Administrator". You will be prompted for your admin password for your machine, and Ruby should then install successfully.

IMPORTANT: If you encounter a "Permission denied" warning when installing the rhc gem, you should run the Command Prompt as an administrator (right click the shortcut and select "Run As Administrator") and retry. You will be prompted for your admin password for your machine, and the rhc gem should then install successfully.

== Run Example
Now you will run a simple example.
This example provides you with a starting point that you will build on when you come to doing the coursework.
Therefore, it is very important that you get this working and become familiar with the code.

=== Download JBoss EAP 6.4.0
1. Go link:http://www.jboss.org/products/eap/download/[here].
2. Download the zip distribution of JBoss EAP 6.4.0.GA. _Note:_ You need to make sure you use this version of JBoss EAP as this matches the version you will be using on OpenShift. You will be required to register for the https://community.jboss.org/[JBoss community] website as part of the download process.
3. Unzip JBoss EAP to somewhere on your computer.

=== Obtain the Contacts-Swagger Quickstart

1. Visit the NewcastleComputingScience/jboss-wfk-quickstarts github repo release page link:https://github.com/NewcastleComputingScience/jboss-wfk-quickstarts/releases/tag/v2.7.0%2BNCL201516-RC1[here].
2. Click on the *Download ZIP* link to obtain all the Quickstarts
3. Unzip the download to somewhere on your computer.
4. Open a terminal and go to the `contacts-swagger` directory in the quickstart bundle you just unzipped.


=== Run the Quickstart
1. Step through the instructions on the Contacts-Swagger quickstart page link:https://github.com/NewcastleComputingScience/jboss-wfk-quickstarts/tree/v2.7.0%2BNCL201516-RC1/contacts-swagger[here], upto and including section "Run the Arquillian Tests". Make sure you follow the "Configure Maven" section correctly as these instructions are important.
2. Now follow the "Build and Deploy the Quickstart to OpenShift" instructions link:https://github.com/NewcastleComputingScience/jboss-wfk-quickstarts/tree/v2.7.0%2BNCL201516-RC1#build-and-deploy-the-quickstart---to-openshift[here], including all the sub-sections that take you to the end of the page.


== Eclipse Setup
If you want to use Eclipse to edit the contacts-swagger example (and your coursework), you must follow these steps:

. *Install m2eclipse*. Google "Install m2eclipse <your Eclipse version>". Note: the procedure differs between eclipse versions
. *Import the maven project into eclipse*.
  .. Within a new workspace, click 'File' -> 'Import...'
  .. Select 'Maven' -> 'Existing Maven Projects'
  .. Click on 'Browse' and select the quickstart you wish to import.
  .. Click 'Finish'

== Working with Git
You will be using Git in the coursework for regular checkpoint and backup of your code to GitHub.
You will also use Git to deploy new versions of your application to OpenShift.
This section will show you how to create a copy of the 'contacts-swagger' example, ready fo you to extend in the coursework, and also how to push the code to GitHub and OpenShift.

* Build on top of the contacts-swagger example, by moving your clone of the OpenShift git repository at contacts-swagger to some other location on your disk, where you want to develop your coursework submission.

* Now you need to be able to push your code to your git repository on GitHub. To do this, you will need the url of the private repository created earlier.

    git remote add github <private GitHub repo url>
    git push github master -f

WARNING: The -f flag for git push should not be used after this initial setup. Doing so may result in the loss of commits in the remote repository.

* When you work with Git there are often files you wish for Git to ignore and exclude from your repository. These may include confidential data or files generated by your IDE. This is achieved using a .gitignore file which specifies the files and/or directories you wish to exclude. We suggest you use the .gitignore file provided in this csc8104-assignment repository. Copy this file into your repository and commit the file using the following commands.

   git add .gitignore
   git commit -m 'Adding .gitignore file.'

TIP: If you are new to Git, you should read Pro Git.  Chapters 1-3 should cover all the functionality required for this coursework.  Available at: http://git-scm.com/book

== Viewing your datasource
During development of your application you may find it very useful to be able to inspect the contents of your database. To do this you will use h2console, which is provided as part of the quickstarts.

=== Deploying h2console

Obtain the `h2console.war` file from here: https://github.com/jboss-developer/jboss-eap-quickstarts/tree/6.4.0.GA/h2-console , copy it into the "standalone/deployments" directory of your *EAP_HOME* directory and restart your local JBoss server.

=== Accessing h2console
You can access the console at http://localhost:8080/h2console.

To log into the datasource for your application, use the following details.

    Driver Class: javax.naming.InitialContext
    JDBC URL: Your JDBC URL is available in your persistence.xml file, and can be found between the <jta-data-source> tags e.g. java:jboss/datasources/ContactsSwaggerQuickstartDS
    Username: sa
    Passowrd: sa

. Click "Test Connection" and if these details are correct you will see "Test successful".

. Press "Connect" to view the contents of the datasource.

TIP: Your persistence.xml is the configuration file used to specify the connection details to your database. Your persistence.xml file can be found in src/main/resources/META-INF.

== Testing your API

Besides the Arquillian tests run through maven, you will occasionally want to test your API in a more manual fashion, in order to clearly see what information is being sent and received.

It is partly for this purpose that the Contacts-Swagger quickstart uses the link:http://swagger.io[Swagger] tool to generate API documentation. 

Not only does Swagger use link:https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X[@Annotations] to automatically generate attractive documentation for API endpoints, but this documentation is interactive.
This allows you to run each supported http operation from the documentation webpage with sample input and see the response JSON.
An example of swagger documentation can be found link:http://petstore.swagger.io/[here].

Another common method of manual testing is of APIs is sending http requests from the command line, using a tool called link:http://curl.haxx.se/[cURL].

cURL should already be installed on your machines, if it is not, please contact the teaching staff.

To give you an example of how you might use cURL to see what your API is doing, once the QuickStart is running (locally) you could execute the following commands (in cmd.exe):

* to see a list of all contacts returned, formatted as JSON and accompanied by all HTTP headers.

    curl -v http://localhost:8080/jboss-contacts-swagger/api/contacts/

* to create a new contacts.

    curl -X POST --header "Content-Type: application/json" --header "Accept: application/json" -d "{
      \"firstName\": \"Alice\",
      \"lastName\": \"Bob\",
      \"email\": \"alice@bob.com\",
      \"phoneNumber\": \"(227) 111-1111\",
      \"birthDate\": \"1982-10-26\"
    }" "http://contacts-100937864.rhcloud.com/api/contacts"

The *-v* switch instructs curl to display all possible information, whilst the *-X* switch allows you to specify the HTTP method to be used and *-d* the data to be sent.

NOTE: In the above URLs "jboss-contacts-swagger" is the name of the deployed .war file.

TIP: If you would like to learn more about how to use cURL, you can refer to the link:http://curl.haxx.se/docs/manpage.html[official documentation] or link:http://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest--net-16340[this] useful tutorial.
