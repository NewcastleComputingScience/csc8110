= Frequently Asked Questions (FAQs)

This page will be updated regularly by CSC8110 demonstrators to include answers to frequently asked questions and solutions to any issues encountered by students.

If you are encountering an issue and cannot find a solution here, please do not hesitate to contact a demonstrator during the practical sessions, or post to the relevant forum on the Blackboard discussion boards.

If there is something you would like to appear on this page, don't hesitate to contact Matthew Forshaw (mailto:matthew.forshaw@ncl.ac.uk[matthew.forshaw@ncl.ac.uk])  and he will update the page accordingly.

'''

== Practical Tutorials

=== I am working on the VM pracical, but I'm based on Windows and find generating an SSH confusing. Is it sufficient for me to use the conventional 'password' approach at this stage?

Authentication using SSH keys is the best-practice way of remotely authenticating with a server, but for the purposes of this tutorial, yes, it would be fine to use a password-based apporach.

== Coursework

=== Common Issue: `HTTP Error 400. The request has an invalid header name.`

If you receive an exception as follows, this may be due to including a space in the name of a property e.g. `message.setProperty("Registration Plate",plate)`. Removing the space will fix the issue.

----
com.microsoft.windowsazure.exception.ServiceException: com.sun.jersey.api.client.UniformInterfaceException: POST https://nehannaford.servicebus.windows.net/TrafficTopic/messages?api-version=2013-07 returned a response status of 400 Bad Request
Response Body: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN""http://www.w3.org/TR/html4/strict.dtd">
<HTML><HEAD><TITLE>Bad Request</TITLE>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=us-ascii"></HEAD>
<BODY><h2>Bad Request - Invalid Header</h2>
<hr><p>HTTP Error 400. The request has an invalid header name.</p>
</BODY></HTML>

    at com.microsoft.windowsazure.services.servicebus.implementation.ServiceBusExceptionProcessor.sendTopicMessage(ServiceBusExceptionProcessor.java:151)
    at uk.ac.ncl.yourname.csc8110.SendMessage.main(SendMessage.java:32)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
Caused by: com.sun.jersey.api.client.UniformInterfaceException: POST https://nehannaford.servicebus.windows.net/TrafficTopic/messages?api-version=2013-07 returned a response status of 400 Bad Request
    at com.sun.jersey.api.client.WebResource.voidHandle(WebResource.java:707)
    at com.sun.jersey.api.client.WebResource.access$400(WebResource.java:74)
    at com.sun.jersey.api.client.WebResource$Builder.post(WebResource.java:553)
    at com.microsoft.windowsazure.services.servicebus.implementation.ServiceBusRestProxy.sendMessage(ServiceBusRestProxy.java:194)
    at com.microsoft.windowsazure.services.servicebus.implementation.ServiceBusRestProxy.sendTopicMessage(ServiceBusRestProxy.java:305)
    at com.microsoft.windowsazure.services.servicebus.implementation.ServiceBusExceptionProcessor.sendTopicMessage(ServiceBusExceptionProcessor.java:149)
    ... 6 more
----

=== Common Issue: `Service or property not registered`

An existing link:https://github.com/Azure/azure-sdk-for-java/issues/465[bug] in the Azure library for Java may lead to a `Service or property not registered` error when running your application on the command line through Maven.

If you encounter an error message such as the following, please run `rm -r target` to remove your target directory, then run `mvn clean package` twice, and this should fix the issue for you.

It is important to note that if you receive the message below, this is due to the Azure bug and *cannot* be caused by errors in your code. Persevere repeating the steps above and this should fix the issue for you.

----
Exception in thread "main" java.lang.RuntimeException: Service or property not registered:  com.microsoft.windowsazure.services.servicebus.ServiceBusContract class com.sun.jersey.api.client.Client
	at com.microsoft.windowsazure.core.DefaultBuilder.build(DefaultBuilder.java:198)
	at com.microsoft.windowsazure.core.DefaultBuilder$1.create(DefaultBuilder.java:138)
	at com.microsoft.windowsazure.core.DefaultBuilder.build(DefaultBuilder.java:200)
	at com.microsoft.windowsazure.core.DefaultBuilder$1.create(DefaultBuilder.java:138)
	at com.microsoft.windowsazure.core.DefaultBuilder.build(DefaultBuilder.java:200)
	at com.microsoft.windowsazure.Configuration.create(Configuration.java:113)
	at com.microsoft.windowsazure.services.servicebus.ServiceBusService.create(ServiceBusService.java:51)
	at uk.ac.ncl.yourname.AzureBusHandler.<init>(AzureBusHandler.java:42)
	at uk.ac.ncl.yourname.Producer.main(Producer.java:25)
----

=== I am encountering issues creating my private Github repository
I have, so far, had one report of a student attempting to create a private Github repository for CSC8110 using the link I sent yesterday, where the name of the repository created did not match their username. For example, if your username in Github is JoeBloggs, the repository created should be in the format https://github.com/NCL-CloudComputing/csc8110-cloud-computing-2015-16-JoeBloggs.

I have raised this as an issue with Github (https://github.com/education/classroom/issues/360) and will keep everyone informed of progress. This appears to be an intermittent issue, so hopefully won’t affect most of you guys. 

If anyone has encountered a similar problem, or has any other difficulties creating their Github repository, please do not hesitate to get in touch and we’ll do all we can to help.

=== Python: Returning custom properties for messages.
I've had a couple of queries asking how to get custom properies for messages when using Azure from Python.

The following code allows you to iterate through each of the custom properties and print them out one-by-one.

[source,python]
----
# recieve vehicle messages
msg = bus_service.receive_subscription_message('yourTopicName', 'AllMessages', peek_lock=True)
print(msg.body)

for key in msg.custom_properties:
	print key, 'corresponds to', msg.custom_properties[key]
----

To retrieve the value of a particular custom property, you could use code such as the following:

[source,python]
----
msg.custom_properties["propertyname"];
----


=== Java: Which dependency should I add to start using Azure Table Storage from Java?

If you are using Maven for your build you can insert the following depencency to your pom within your `<dependencies>...</dependencies>` block.

[source,xml]
----
    <dependency>
      <groupId>com.microsoft.azure</groupId>
      <artifactId>azure-storage</artifactId>
      <version>4.0.0</version>
    </dependency>
----

If you are adding your dependencies to your classpath inside your IDE such as Eclipse or IntelliJ, you can download the jar file link:http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22azure-storage%22[here].

[[anchor-java-cloudtable]]
=== Java: Unexpected parameters to the constructor of `CloudTable`
In Practical 3 for Java, a number of students have encountered difficulties creating `CloudTable` objects according to the tutorial instructions. A recent change to the Azure SDK has not been reflected in the documentation, so I would like to quickly outline the correct steps involved.

First you will wish to define your connection string (in the same way you normally would): 

[source,java]
----
// Define the connection-string with your values.
public static final String storageConnectionString = 
    "DefaultEndpointsProtocol=http;" + 
    "AccountName=your_storage_account;" + 
    "AccountKey=your_storage_account_key";
----

Now, create variables to store your storage account name and table name:

[source,java]
----
String tableName = "YOUR_TABLE_NAME";
String storageAccountName = "YOUR_STORAGE_ACCOUNT_NAME";
----

To quote the original tutorial:

----
URL format: Code addresses tables in an account using this address format:
http://<storage account>.table.core.windows.net/<table>
----

Now you will wish to establish a connection, and create your table if it does not already exist.

[source,java]
----
StorageCredentials storageCredentials = StorageCredentials.tryParseCredentials(storageConnectionString);
URI uriTable = new URI("http://" + storageAccountName + ".table.core.windows.net/" + tableName);
StorageUri storageURI = new StorageUri(uriTable);
CloudTable cloudTable = new CloudTable(storageURI,storageCredentials);
cloudTable.createIfNotExists();
----

Now you should be up and running, and the remainder of the tutorial will work well :) 

[[anchor-viewtablestorage]]
=== General: How can I view the contents of my Azure Table Storage tables?

A few students have asked me about approaches to being able to view the contents of their tables in Table Storage. This can be a useful additional step in helping debug your application. 

A list of tools to view the contents of Table Storage tables is available link:http://blogs.msdn.com/b/windowsazurestorage/archive/2014/03/11/windows-azure-storage-explorers-2014.aspx[here]. 

Two promising options are `Azure Storage Explorer for Windows` and `Azure Web Storage Explorer`. The first option should be installed on your own computer (Windows only) while the other should work in your web browser if you provide your account and key.

These tools are currently untested for this coursework, so please do get in touch with us to let us know your experiences using these tools, and we will update the FAQ section.


[[anchor-nothreads]]
=== General: Should I be using Threads to achieve parallelism of my Smart Speed Camera

No. You should design your Smart Speed Camera application such that it could be run simultaneously a number of times. Your source code for your Smart Speed Camera should model the operation of a *single* Smart Speed Camera instance (with a particular location, speed limit, and stream of randomly generated traffic). You should then be able to run multiple copies of this program (with different command line arguments or properties file) to model multiple Smart Speed Cameras distributed throughout a city.

For those of you who have pursused a threaded approach in your application, do not worry. A threaded approach will often be much more complicated than a non-theaded one, so it should be relatively easy to refactor your code as described above. My advice to anyone who currently has a threaded approach would be to prioritise making this change over completing subsequent tasks in the coursework assignment.

If anyone has any queries about this, please don't hesitate to get in touch, providing a link to your source code in your private Github repository (or via the University link:http://dropoff.ncl.ac.uk[Dropoff] service) and I will be happy to advise. Similarly, please don't hesitate to discuss this with your demonstrator during the remaining practical slots.


[[anchor-readingpropertybeforeifstatement]]
=== Java: When I run my code to recieve messages from the Service Bus, I receive an `Generic exception encountered: null` exception.

There are a number of reasons why such an exception might be thrown, but I would like to take a couple of minutes to describe how you might go about diagnosing this further, and point people in the direction of one common misunderstanding.

==== How can I find out what's actually going on?

It is likely you will have the following code block in your solution, based on the tutorial:

[source,java]
----
try {
	... 
} catch (Exception e) {
	System.out.print("Generic exception encountered: ");
	System.out.println(e.getMessage());
	System.exit(-1);
}
----

When this exception is thrown, you will often receive the slightly *less* than useful message: `Generic exception encountered: null`

You can adapt your code to look like the following, which will provide you more information about the exception you have encountered:

[source,java]
----
try {
	... 
} catch (Exception e) {
	System.out.print("Generic exception encountered: ");
	System.out.println(e.getMessage());
	e.printStackTrace();
	System.exit(-1);
}
----

This should highlight the precise issue which is causing an exception to be thrown.

==== The most common cause
The most common cause students have had when encountering this issue, has been to access the `getProperty()` method of the returned `BrokeredMessage` *before* the `if` statemnt which ensures the message is not null and has a message ID.

This check is performed in the following line in your code:

[source,java]
----
if (message != null && message.getMessageId() != null
{
	...
}
----

In the event that you ask for messages from the Service Bus, but your topic does not contain any messages, your `message` variable will be set to `null`. If you then attempt to call the `getProperty()` method on the null object, an exception will be thrown.

*The solution: * Only change the code within the `if` statement shown above.
